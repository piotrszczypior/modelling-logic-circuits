-- @path CIRCUIT=/logic-circuit-model/model/circuit.ecore

module cir2cir;
create OUT : CIRCUIT from IN : CIRCUIT;

rule CopyCircuit {
    from circ : CIRCUIT!LogicCircuit
    to new_circ : CIRCUIT!LogicCircuit (
        name <- 'changed',
        gates <- circ.gates,
        connections <- circ.connections,
        inputs <- circ.inputs,
        outputs <- circ.outputs
    )
}


rule CopyGates {
    from gate : CIRCUIT!LogicGate (
    	not thisModule.isOneOfDoubleNotGate(gate) and
		not thisModule.isNotInAndToNotPattern(gate, #AND) and
		not thisModule.isAndFeedingToNotPattern(gate, #AND) and
		not thisModule.isAndFeedingToNotPattern(gate, #OR) and 
		not thisModule.isNotInAndToNotPattern(gate, #OR) 
    )
    to new_gate : CIRCUIT!LogicGate (
        name <- gate.name + '_changed',
        id <- gate.id,
        type <- gate.type
    )
}


rule CopyConnections {
   from conn : CIRCUIT!Connection (
   		not thisModule.isInputToDoubleNot(conn) and 
		not thisModule.isDoubleNotConnection(conn) and
		not thisModule.isOutputOfDoubleNot(conn) and
		not thisModule.isConnectionInAndToNotPattern(conn, #AND) and 
		not thisModule.isConnectionInAndToNotPattern(conn, #OR) 
   )
   to new_conn : CIRCUIT!Connection (
       name <- conn.name,
       id <- conn.id,
       sourceGate <- conn.sourceGate,
       targetGate <- conn.targetGate,
       sourceTerminal <- conn.sourceTerminal,
       targetTerminal <- conn.targetTerminal
   )
}


rule CopyInputTerminals {
    from input : CIRCUIT!InputTerminal
    to new_input : CIRCUIT!InputTerminal (
        name <- input.name,
        id <- input.id
    )
}


rule CopyOutputTerminals {
    from output : CIRCUIT!OutputTerminal
    to new_output : CIRCUIT!OutputTerminal (
        name <- output.name,
        id <- output.id
    )
}

rule BypassDoubleNotConnection {
	from
		connection : CIRCUIT!Connection (
			thisModule.isDoubleNotConnection(connection)
		)
	to bypassConnection : CIRCUIT!Connection (
		name <- connection.sourceGate.inputs->first().name + '_bypassed',
        id <- connection.sourceGate.inputs->first().id + '_bypassed',
        sourceGate <- connection.sourceGate.inputs->first().sourceGate,
        sourceTerminal <- connection.sourceGate.inputs->first().sourceTerminal,
        targetGate <- connection.targetGate.output.targetGate,
        targetTerminal <- connection.targetGate.output.targetTerminal
	)
}

rule ReplaceAndToNotPatternWithNand {
	from andGate : CIRCUIT!LogicGate (
		thisModule.isAndFeedingToNotPattern(andGate, #AND)
	)
	to nandGate: CIRCUIT!LogicGate (
		name <- andGate.name + '_NAND',
		id <- andGate.id,
		type <- #NAND,
		output <- andGate.output.targetGate.output
	)
}

rule ReplaceOrToNotPatternWithNor {
	from orGate : CIRCUIT!LogicGate (
		thisModule.isAndFeedingToNotPattern(orGate, #OR)	
	)
	to norGate : CIRCUIT!LogicGate (
		name <- orGate.name + '_NOR',
		id <- orGate.id,
		type <- #NOR,
		output <- orGate.output.targetGate.output	
	) 
}

helper def : isOneOfDoubleNotGate(gate : CIRCUIT!LogicGate) : Boolean = 
	if gate.type <> #NOT then
        false
    else
        -- NOT gate produces output into another NOT gate
        let feedsIntoNot : Boolean = 
            if not gate.output.oclIsUndefined() then
                if not gate.output.targetGate.oclIsUndefined() then
                    gate.output.targetGate.type = #NOT
                else
                    false
                endif
            else
                false
            endif
        in
        -- NOT gate is fed by another NOT gate  
        let fedByNot : Boolean = 
            gate.inputs->exists(conn | 
                if not conn.oclIsUndefined() then
                    if not conn.sourceGate.oclIsUndefined() then
                        conn.sourceGate.type = #NOT
                    else
                        false
                    endif
                else
                    false
                endif
            ) 
		in
        feedsIntoNot or fedByNot
    endif;


helper def: isDoubleNotConnection(conn : CIRCUIT!Connection) : Boolean =
	if	conn.sourceGate.oclIsUndefined() or 
		conn.targetGate.oclIsUndefined() 
	then
		false 
	else 
		(conn.sourceGate.type = #NOT and conn.targetGate.type = #NOT)
	endif;

	 
helper def: isOutputOfDoubleNot(conn: CIRCUIT!Connection) : Boolean =
	if conn.sourceGate.oclIsUndefined() then
		false
	else 
		if conn.sourceGate.inputs->isEmpty() or conn.sourceGate.inputs->first().sourceGate.oclIsUndefined() then 
			false 
		else
			(conn.sourceGate.type = #NOT and
		 	conn.sourceGate.inputs->first().sourceGate.type = #NOT)
		endif
	endif;
			

helper def : isInputToDoubleNot(conn : CIRCUIT!Connection) : Boolean =
    if conn.targetGate.oclIsUndefined() then
        false
    else
        if conn.targetGate.type = #NOT then
			if conn.targetGate.output.oclIsUndefined() then
				false
			else 
				if conn.targetGate.output.targetGate.oclIsUndefined() then
					false 
				else 
					conn.targetGate.output.targetGate.type = #NOT
				endif
			endif
		else
			false 
		endif
    endif;
			
			
helper def : isAndFeedingToNotPattern(gate: CIRCUIT!LogicGate, targetType: CIRCUIT!GateType) : Boolean = 
	gate.type = targetType and thisModule.hasNotInput(gate);
			
			
helper def : hasNotInput(gate: CIRCUIT!LogicGate) : Boolean = 
	if gate.output.targetGate.oclIsUndefined() then 
		false 
	else 
		gate.output.targetGate.type = #NOT
	endif;
		
		
helper def : isConnectionInAndToNotPattern(connection: CIRCUIT!Connection, targetType: CIRCUIT!GateType) : Boolean =
	if connection.targetGate.oclIsUndefined() or 
	   connection.sourceGate.oclIsUndefined() 
    then
		false
	else 
		connection.sourceGate.type = targetType and
		connection.targetGate.type = #NOT
	endif;
	
	
helper def : isNotInAndToNotPattern(gate: CIRCUIT!LogicGate, targetType: CIRCUIT!GateType) : Boolean = 
	if gate.type <> #NOT or 
	   gate.inputs->first().sourceGate.oclIsUndefined()
	then 
		false
	else 
		gate.inputs->first().sourceGate.type = targetType
	endif;